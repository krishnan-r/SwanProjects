#!/home/ozapatam/anaconda3/envs/swan-term/bin/python

import subprocess
import argparse
import pprint
import json
import sys
import os

def has_project_file(path):
    """
    Method to check if .swanproject exists
    path: path to check
    """
    return os.path.exists(path+os.path.sep+".swanproject")

def get_project_info(path):
    if has_project_file(path):
        swanfile = path+os.path.sep+".swanproject"
        with open(swanfile) as json_file:
            data = json.load(json_file)
        return data
    else:
        None

def get_all_specs(home_kernels):
    from jupyter_client.kernelspec import KernelSpecManager
    from jupyter_core.paths import jupyter_data_dir
    km=KernelSpecManager()
    kspecs = km.get_all_specs()
    home_data_dir=jupyter_data_dir()
    stack_kspecs={}
    for spec in kspecs:
        if home_kernels:
            stack_kspecs[spec]=kspecs[spec]
        else:
            if not home_data_dir in kspecs[spec]['resource_dir']:
                stack_kspecs[spec]=kspecs[spec]
    return stack_kspecs

def get_env_specs(project_path,home_kernels):
    if project_path == None:
        return get_all_specs(home_kernels=args.home_kernels)
    else:
        if not has_project_file(project_path):
            print({'error':'Error, not valid project path, .swanfile not found.','project_path':project_path}) 
        project_info = get_project_info(project_path)

        command =  ["/bin/bash","swan_env",project_info['source'],project_info['stack'],project_info['platform'],project_info['user_script'], ".","python "+__file__]
        if args.home_kernels:
            command.append("--home_kernels")
        env=os.environ
        env["SWAN_ENV_SILENCE"] = "1"
        proc = subprocess.Popen(command, stdout = subprocess.PIPE, env=env)
        proc.wait()
        data = proc.stdout.read().decode("utf-8")
        proc.communicate()
        data="".join(data).replace('\n','')
        data=eval(data)
        return data

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Swan Enviroment Kernel Manager CMD options.')
    parser.add_argument('--home_kernels', action='store_true', help="Enable return kernels from home.")
    parser.add_argument('--project_path', type=str,default=None, help='Project directory path')
    args = parser.parse_args()
    project_path = args.project_path
    home_kernels = args.home_kernels
    data = get_env_specs(project_path,home_kernels)
    pprint.pprint(data,indent=4)
